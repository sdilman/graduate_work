@startuml
box External
actor "Frontend" as frontend
participant "Auth API" as auth
participant "Payment Gateway (Ð®kassa)" as payment
participant "Email Service" as email
participant "Push Notification Service" as push
box end

box Billing Service
participant "Billing API" as billing
database "Database" as db
database "Redis cache" as cache
queue "Kafka" as kafka
participant "Logging Service" as logging
participant "Monitoring Service" as monitoring
participant "Encryption Service" as encryption
box end

group /create_order
frontend -> billing++: Create order
billing -> logging: Log request details (mask sensitive data)
billing -> auth++: Strict token validation
auth --> billing: HTTP 403
billing -> logging: Log auth failure (mask sensitive data)
billing --> frontend: HTTP 403
auth --> billing--: OK
billing -> encryption: Encrypt order data
billing -> db: Save order in db (encrypted)
billing -> logging: Log order creation (mask sensitive data)
billing --> frontend: order_id
end

group /get_payment_link/{order_id}
frontend -> billing: Request
billing -> logging: Log request details (mask sensitive data)
billing -> cache: Check link in cache (encrypted)
alt Cache hit
    cache --> billing: return link (encrypted)
    billing -> encryption: Decrypt link
    billing -> logging: Log cache hit (mask sensitive data)
    billing --> frontend: return /link to payment
else Cache miss
    billing -> payment++: Create payment (over HTTPS)
    payment --> billing--: get payment object (encrypted)
    billing -> encryption: Decrypt payment object
    billing -> db: Save transaction object with pending status (encrypted)
    billing -> cache: Save link to cache (encrypted)
    billing -> logging: Log cache miss and payment creation (mask sensitive data)
    billing -> monitoring: Track payment creation time
    billing --> frontend--: return /link to payment
end
end

group /cancel_subscription_renewal/{subscription_id}
frontend -> billing++: Request
billing -> logging: Log request details (mask sensitive data)
billing -> auth++: Strict token validation
auth --> billing: HTTP 403
billing -> logging: Log auth failure (mask sensitive data)
billing --> frontend: HTTP 403
auth --> billing--: OK
billing -> db: change subscription renewal status (encrypted)
billing -> logging: Log subscription status change (mask sensitive data)
billing --> frontend--: OK
end

group /create_refund/{order_id} # only for admins
frontend -> billing++: Request
billing -> logging: Log refund request (mask sensitive data)
billing -> auth++: Strict token validation
auth --> billing: HTTP 403
billing -> logging: Log auth failure (mask sensitive data)
billing --> frontend: HTTP 403
auth --> billing--: OK
billing -> db: create refund transaction in db with pending status (encrypted)
billing -> payment: request to create refund (over HTTPS)
billing -> logging: Log refund creation (mask sensitive data)
billing --> frontend--: OK
end

group /results_callback_url
payment -> billing: Send results (over HTTPS)
billing -> logging: Log results received (mask sensitive data)
billing -> kafka: write event (encrypted)
billing -> monitoring: Monitor result processing time
end

group results_worker
kafka -> db: Read results of transaction (decrypt)
db -> logging: Log result processing (mask sensitive data)
db -> db: Save payment method token for auto renewal if success and enabled (encrypted)
db -> db: update transaction status (encrypted)
db -> db: create/update goods in db per user from order (encrypted)
db -> logging: Log update completion (mask sensitive data)
end

group subscription_renewal_worker
db -> db: Find users with subscriptions for renewal (encrypted)
db -> db: Create orders for them (if not already exists) (encrypted)
db -> logging: Log order creation for renewal (mask sensitive data)
loop while retry_count < max_retry_count; retry every n days
    db -> payment: Try to pay using payment token (over HTTPS)
    alt Payment success
        db -> db: Update renewal status (encrypted)
        db -> logging: Log successful renewal (mask sensitive data)
        db -> email: Send confirmation email
        db -> push: Send confirmation push notification
    else Payment failure
        db -> logging: Log payment failure (mask sensitive data)
        db -> monitoring: Track failed renewal attempt
        db -> email: Send failed renewal notification
        db -> push: Send failed renewal push notification
    end
end
end

group Auto-renewal Notification
db -> db: Check subscriptions for renewal in 7 days (encrypted)
alt Subscriptions found
    db -> email: Send renewal reminder email
    db -> push: Send renewal reminder push notification
    db -> logging: Log reminder sent (mask sensitive data)
end
end

group Cancel Auto-renewal Request
frontend -> billing++: Request to cancel auto-renewal
billing -> auth++: Strict token validation
auth --> billing: OK
billing -> db: Update subscription status to not renew (encrypted)
billing -> logging: Log cancellation request (mask sensitive data)
billing --> frontend--: OK, auto-renewal cancelled
end

group Error Handling
billing -> monitoring: Track errors and timeouts
billing -> logging: Log error details (mask sensitive data)
end
@enduml
