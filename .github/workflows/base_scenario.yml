name: movies

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check:

    runs-on: ubuntu-latest

    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      changed_files: ${{ steps.check.outputs.changed_files }}

    steps:
      # 1. Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Get a list of changed .py files
      #TODO: add other file types
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **.py

      # 3. Set outputs for changed files
      - name: Set change flag and files
        id: check
        run: |
          if [ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]; then
            echo "has_changes=${{ steps.changed-files.outputs.any_changed }}" >> $GITHUB_OUTPUT
            echo "changed_files=${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "changed_files=" >> $GITHUB_OUTPUT
          fi

  tests:
    needs: [check]
    if: ${{ needs.check.outputs.has_changes == 'true' }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      # 1. Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up the Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy pydantic

      # 4. Run Ruff Linter and show all errors
      - name: Run Ruff Linter
        run: |
          ruff check --output-format=github --config=pyproject.toml .


      # 5. Run Mypy Type Checking and show all errors
      - name: Run Mypy Type Checking
        run: |
          mypy --config-file=pyproject.toml .

      # 6. Set Telegram notification message
      - name: Set Telegram Notification Message
        run: |
          VERSION="on ${{ github.repository }} for Python ${{ matrix.python-version }}"
          if [ "${{ job.status }}" == "success" ]; then
            echo "TELEGRAM_MESSAGE=CI/CD pipeline passed successfully $VERSION" >> $GITHUB_ENV
          else
            echo "TELEGRAM_MESSAGE=CI/CD pipeline failed $VERSION" >> $GITHUB_ENV
          fi

    # 7. Send notification to Telegram
      - name: Send Notification to Telegram
        run: |
          curl -s \
          --data "text=${{ env.TELEGRAM_MESSAGE }}" \
          --data "chat_id=${{ secrets.TELEGRAM_RECIPIENT_USER_ID }}" \
          "https://api.telegram.org/bot${{ secrets.TELEGRAM_SENDER_BOT_TOKEN }}/sendMessage"
